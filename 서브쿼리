### 1. 서브쿼리

1) 개요

- 일반적인 쿼리(메인/주 쿼리) 안에 있는 또 다른 칭함. 쿼리이며, 보조/하위 쿼리로
- 메인쿼리 + 서브쿼리 = 한 문장
- SELECT 문장을 기반으로 하며, 괄호로 둘러싸임.
- 여러 개의 서브 쿼리 사용 가능

서브쿼리와 메인쿼리와의 연관성

- 연관성 있는 서브쿼리 : 메인쿼리와 조인
- 연관성 없는 서브쿼리 : 메인쿼리와 독립적

2) 종류 (서브 쿼리 위치에 따라)

 -1. 스칼라 서브쿼리

 -2. 인라인 뷰

 -3. 중첩 서브쿼리

## 1-1. 스칼라 서브쿼리란?

1) SELECT 절에 위치

2) 컬럼이나 표현식 처럼 사용

3) 서브쿼리가 최종반환하는 로우(ROW) 수와 컬럼/표현식은 각각 1개

예제2)에 적용되는 사항

4) 일반적으로는 Alias를 기재한다 왜? 컬럼 역할을 수행함으로

5) 서브쿼리 내에서 메인 쿼리와 조인 가능(일반적으로 조인을 함)

```sql
예제1) 부서명과 같이 특정 코드 명칭을 가져올 때 스칼라 서브쿼리를 사용하는 경우 多

( SELECT b.department_name

FROM departments b

WHERE a.department_id = b.department_id ) dept_name

예제2) 서브쿼리에 Where 절이 없는 경우

SELECT a.employee_id,

a.first_name || ' ' || a.last_name emp_name,

a.department_id,

( SELECT b.department_name

FROM departments b

) dept_name

FROM employees a

ORDER BY 1;

->
메인쿼리는 각각 한 개의 컬럼인데, 서브쿼리의 경우에는 
departments 테이블의 모든 쿼리임으로 말이 맞지 않으며, 
where절에 조인이 없는 것 또한 원인 중 하나이다.

선생님 비유 : 본 수식은 사원은 한명인데, 부서가 여러건 나오는 경우이다.

결과값 : 단일 행 하위 질의에 2개 이상의 행이 리턴되었습니다.

예제3) 예제 3과 비슷한 CASE

SELECT a.employee_id,

a.first_name || ' ' || a.last_name emp_name,

a.department_id,

( SELECT b.department_name, b.location_id

FROM departments b

WHERE a.department_id = b.department_id ) dept_name

FROM employees a

ORDER BY 1;

->
메인쿼리 SELECT 절에서 결과값으로 나오는 컬럼들은 한 개씩인데, 
서브쿼리 SELECT문에서 2개의 컬럼을 지정하면 “값의 수가 너무 많습니다”와 같은 오류가 나온다.

예제4)

SELECT a.employee_id,

a.first_name || ' ' || a.last_name emp_names, a.job_id

,( SELECT b.job_title || '(' || b.job_id || ')'

FROM jobs b

WHERE a.job_id = b.job_id ) job_names

FROM employees a

ORDER BY 1;

->
컬럼은 두 개이지만 반환하는 값이 단일 값이면 오류가 나지 않는다.
```

스칼라 서브쿼리 & 조인의 차이

1) 6.1.2의 예제 보면 결과값이 다르다 (참고)

2) 스칼라 서브 쿼리는 성능에 좋지 않음으로 과도한 사용 자제

3) 스칼라 서브쿼리보다는 left join 사용 권고 (결과값은 동일)

## 1-2. 인라인 뷰(FROM 절에 위치)

1) 하나의 테이블처럼 동작

2) 최종 반환하는 로우와 컬럼 표현식 수는 1개 이상 가능 (많다고 실행이 안되거나 하는 경우는 X)

3) 서브 쿼리에 대한 별칭 반드시 명시

4) 메인쿼리와 조인조건은 메인 쿼리의 WHERE 절에서 처리가 일반적

인라인 뷰가 필요한 이유

1) 기존 단일 테이블로 필요한 정보를 가져오기 어려울 때

2) 복잡한 쿼리를 좀 더 직관적으로 사용하기 위해 등등

```sql
예제1.1)

SELECT a.employee_id,

a.first_name || a.last_name emp_name,

a.department_id,

c.dept_name

FROM employees a,

( SELECT b.department_id,

b.department_name  dept_name

FROM departments b

) c

WHERE a.department_id = c.department_id

ORDER BY 1;

- > 서브쿼리에서 작성한 SELECT 문을 괄호해서 C라는 하나의 컬럼으로 생성하여, 
메인 쿼리에 c.dept_name(나타내고자 하는 결과값)으로 기재한다. 
그리고 WHERE 구문은 외부로 빼서 조인을 진행한다.

예제1.2)

( SELECT b.department_id,

b.department_name  dept_name

FROM departments b

WHERE a.department_id = b.department_id

) c

- > 서브쿼리 구문 내에 WHERE 절을 포함시키면 결과값 안나옴

예제1.3)

LATERAL ( SELECT b.department_id,

b.department_name  dept_name

FROM departments b

WHERE a.department_id = b.department_id

) c

LATERAL 키워드를 사용하면 WHERE 구문을 서브쿼리 내에 작성할 수 있음 (12C 버전 이상만 가능)

예제1.4) P20

SELECT a.employee_id,

a.first_name || ' ' || a.last_name emp_name,

dept.department_name,

loc.street_address, loc.city, loc.country_name

FROM employees a

,( SELECT *

FROM departments b ) dept

,( SELECT l.location_id, l.street_address,

l.city, c.country_name

FROM locations l,

countries c

WHERE l.country_id = c.country_id

) loc

WHERE a.department_id = dept.department_id

AND dept.location_id = loc.location_id

ORDER BY 1;

*lateral 
SELECT a.employee_id,
a.first_name || a.last_name emp_name,
a.department_id, 
c.dept_name
FROM employees a,
LATERAL
( SELECT b.department_name dept_name
FROM departments b 
WHERE a.department_id = b.department_id ) c
ORDER BY 1;

```

## 1-3. 중첩 서브쿼리

- 중첩 서브쿼리 (메인 쿼리의 WHERE 절에 위치)
- 서브쿼리가 조건절의 일부로 사용됨
- 서브쿼리 최종 반환 값과 메인쿼리 테이블의 특정 컬럼 값을 비교 시 사용
- 최고 반환 하는 로우와 컬럼, 표현식은 1개 이상
- Alias 사용 불가
- 서브쿼리 내에서 메인쿼리와 조인 가능

```sql
예제1.1)

SELECT *

FROM departments

WHERE department_id IN ( SELECT department_id

FROM employees

) ;

> departments 테이블에서 이 서브쿼리에서 반환하는 값이 포함된 건만 조회

예제1.2)

SELECT *

FROM departments a

WHERE EXISTS ( SELECT  1

FROM employees b

WHERE a.department_id = b.department_id

) ;

서브쿼리 데이터 내에 데이터가 존재(exists) 하느냐?

SELECT1은 데이터 존재를 체크하기 위해 형식적으로 적어놓은 것이고 서브 쿼리 내 WHERE 절만 맞으면 된다.

성능은 EXIST가 IN보다 좋음.

예제1.3, 1.4)

예제1.2와 비슷한 맥락

예제 1.5

> 는 EXIST, ON과 비슷한 의미
```

## 1-4. 세미조인

- 메인 쿼리와 중첩 서브쿼리를 사용할 때 사용하는 조인
- 중첩 서브쿼리를 사용할 때 WHERE 절에서 IN, EXIST 연산자를 사용

## 1-5. 안티조인

- 세미조인에 NOT 연산자를 사용한 조인
